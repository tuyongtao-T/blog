(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{365:function(s,a,t){"use strict";t.r(a);var e=t(40),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-高级程序设计笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-高级程序设计笔记"}},[s._v("#")]),s._v(" javaScript 高级程序设计笔记")]),s._v(" "),t("h2",{attrs:{id:"第一节-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一节-数据类型"}},[s._v("#")]),s._v(" 第一节 数据类型")]),s._v(" "),t("p",[s._v("javascript目前一共有7种数据类型，分为基本数据类型和引用数据类型。\n"),t("strong",[s._v("基本数据类型包括")]),s._v("：Null Undefined Boolean Number String / BigInt——"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN"),t("OutboundLink")],1),s._v(" "),t("strong",[s._v("引用类型")]),s._v("： 广义的来说是Object,其中包括 狭义object Array Function\n"),t("strong",[s._v("ES6的")]),s._v("： Symbol 类型")]),s._v(" "),t("h4",{attrs:{id:"说到类型，我们首先学习判断数据类型的方法："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说到类型，我们首先学习判断数据类型的方法："}},[s._v("#")]),s._v(" 说到类型，我们首先学习判断数据类型的方法：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("typeof： 粗略判断 typeof a")])]),s._v(" "),t("li",[t("p",[s._v("instanceof: 稍微精确判断 用法 a instanceof Array，返回的是true或false")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("原理：   a._proto_ 是否是 Array.prototype \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("Object.prototype.toString: 准确判断   Object.prototype.toString.call(a)  返回的是 [object Array]  可以转为直接返回类型字符串。 "),t("a",{attrs:{href:"http://hello2dj.com/2018/04/05/fix-typeof/",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const toType = function(obj) {\n  return ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1];\n  // 不同的正则表达式\n  return ({}).toString.call(obj).match(/\\[object (.*?)\\]/)[1].toLowerCase();\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"_1-1-null-undefined-和-boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-null-undefined-和-boolean"}},[s._v("#")]),s._v(" 1.1 Null Undefined 和 Boolean")]),s._v(" "),t("p",[s._v("这里需要注意的是 Null在转为Boolean时为 0 ；undefined转为boolean时为 NaN;")]),s._v(" "),t("p",[s._v("boolean 类型中： 除了 null undefined  0  false NaN  空字符串（''）,其余都为true")]),s._v(" "),t("h3",{attrs:{id:"_1-2-number"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-number"}},[s._v("#")]),s._v(" 1.2 Number")]),s._v(" "),t("p",[s._v("javascript内部，所有数字都是以64位浮点数形式存储，所以1和1.0是相同的，小数运算时要特别小心。\nJavaScript能表示的数值范围在2"),t("sup",[s._v("1024")]),s._v("到2"),t("sup",[s._v("-1024")]),s._v("之间，超出后为Infinity和0。")]),s._v(" "),t("h4",{attrs:{id:"关于-0-和-0："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于-0-和-0："}},[s._v("#")]),s._v(" 关于+0 和-0：")]),s._v(" "),t("p",[s._v("这里说到 === 和 ==  和 Object.is(a,b)\n== 会自动转为数据类型比较；=== 中NaN不等于NaN,+0等于-0；Object.is()中，NaN等于NaN,+0不等于-0")]),s._v(" "),t("h4",{attrs:{id:"与数值相关的全局方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与数值相关的全局方法"}},[s._v("#")]),s._v(" 与数值相关的全局方法")]),s._v(" "),t("ul",[t("li",[s._v("parseInt(a,b)  parseFloat(a,b)   Number(a,b),a为传入的字符串，b为转换的进制数。一般常用的是parseInt()。")]),s._v(" "),t("li",[s._v("isNaN() 用来判断一个值是否为NaN。 isNaN(a)")]),s._v(" "),t("li",[s._v("isFinite() 用来判断一个值是否为正常的数值(有限)。isFinite(a)")])]),s._v(" "),t("h4",{attrs:{id:"number对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number对象"}},[s._v("#")]),s._v(" Number对象")]),s._v(" "),t("p",[s._v("Number对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。作为构造函数时，它用于生成值为数值的对象。")]),s._v(" "),t("h4",{attrs:{id:"实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Number.prototype.toString()， 用来将一个数值转为字符串形式")])]),s._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('(10).toString(b) // "10" b为进制数，默认为10进制\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("Number.prototype.toFixed(b)，将一个数转为指定位数的小数，然后返回这个小数对应的字符串")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('(10).toFixed(2) // "10.00"\n10.005.toFixed(2) // "10.01"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("Number.prototype.toExponential(b),将一个数转为科学计数法形式")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('(10).toExponential()  // "1e+1"\n(10).toExponential(1) // "1.0e+1"\n(10).toExponential(2) // "1.00e+1"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])]),s._v(" "),t("h4",{attrs:{id:"es6补充模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6补充模块"}},[s._v("#")]),s._v(" ES6补充模块")]),s._v(" "),t("ul",[t("li",[s._v("ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。"),t("strong",[s._v("这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。")])]),s._v(" "),t("li",[s._v("ES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。\nNumber.isFinite() 用来检查一个数值是否为有限的（finite），即不是Infinity。")]),s._v(" "),t("li",[s._v("Number.isInteger() 用来判断一个数值是否为整数")])]),s._v(" "),t("h3",{attrs:{id:"_1-3-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-string"}},[s._v("#")]),s._v(" 1.3 String")]),s._v(" "),t("h4",{attrs:{id:"字符串与数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串与数组"}},[s._v("#")]),s._v(" 字符串与数组")]),s._v(" "),t("p",[s._v("字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符,同时具有length属性。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('  var s = \'hello\';\n  s[0] // "h"\n  s[1] // "e"\n  s[4] // "o"\n\n  // 直接对字符串使用方括号运算符\n  \'hello\'[1] // "e"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"字符串对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串对象"}},[s._v("#")]),s._v(" 字符串对象")]),s._v(" "),t("h4",{attrs:{id:"实例方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-2"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),t("ul",[t("li",[s._v("String.prototype.charAt(index)  String.prototype.charCodeAt(index)")]),s._v(" "),t("li",[s._v("String.prototype.concat(str) 这里字符串连接用'+'的性能比concat()好")]),s._v(" "),t("li",[s._v("String.prototype.slice(a,b) 和String.prototype.substring(a,b) 和 String.prototype.substr(a,b) ：a都表示子串的起始位置，前两个的b表示结束的位置（后一位），默认为最后一个；最后一个b表示截取的字符长度。")]),s._v(" "),t("li",[s._v("String.prototype.indexOf(str,b)，String.prototype.lastIndexOf(str,b) :用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回-1，就表示不匹配。")]),s._v(" "),t("li",[s._v("String.prototype.trim() -- String.prototype.trimLeft(),String.prototype.trimRight() [兼容性]")]),s._v(" "),t("li",[s._v("String.prototype.toLowerCase()，String.prototype.toUpperCase()")]),s._v(" "),t("li",[s._v("String.prototype.match() 用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串,如果没有找到匹配，则返回null")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" var matches = 'cat, bat, sat, fat'.match('at');\n matches.index // 1\n matches.input // \"cat, bat, sat, fat\"\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("String.prototype.search()，String.prototype.replace() search方法的用法基本等同于match，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。replace方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("'aaa'.replace('a', 'b') // \"baa\"\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("String.prototype.split()")])]),s._v(" "),t("li",[t("p",[s._v("String.prototype.localeCompare() 用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。")])])]),s._v(" "),t("h4",{attrs:{id:"es6扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6扩展"}},[s._v("#")]),s._v(" ES6扩展")]),s._v(" "),t("ul",[t("li",[s._v("字符串的遍历器接口：ES6 为字符串添加了遍历器接口（Iterator），使得字符串可以被for...of循环遍历。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('for (let codePoint of \'foo\') {\n  console.log(codePoint)\n}\n// "f"\n// "o"\n// "o"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[s._v("模板字符串 ： "),t("code",[s._v("str ${}")]),s._v(" => 模板字符串中嵌入变量，需要将变量名写在${}之中。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" `Hello ${'World'}`\n // \"Hello World\"\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("字符串ES6新增方法")]),s._v(" "),t("ul",[t("li",[s._v("includes()：返回布尔值，表示是否找到了参数字符串。")]),s._v(" "),t("li",[s._v("startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。")]),s._v(" "),t("li",[s._v("endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。 这三个方法都支持第二个参数，表示开始搜索的位置。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let s = 'Hello world!';\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("repeat():返回一个新字符串，表示将原字符串重复n次。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("padStart()，padEnd() ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  'x'.padStart(5, 'ab') // 'ababx'\n  'x'.padStart(4, 'ab') // 'abax'\n\n  'x'.padEnd(5, 'ab') // 'xabab'\n  'x'.padEnd(4, 'ab') // 'xaba'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("trimStart()，trimEnd() ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们的行为与trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-4-array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-array"}},[s._v("#")]),s._v(" 1.4 Array")]),s._v(" "),t("p",[s._v("判断是否是数组: Array.isArray([ ])\n将类数组转为真正的数组：")]),s._v(" "),t("ul",[t("li",[s._v("Array.prototype.slice.call(arrayLike);")]),s._v(" "),t("li",[s._v("Array.from(a)")])]),s._v(" "),t("h4",{attrs:{id:"for-in-循环和数组的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-in-循环和数组的遍历"}},[s._v("#")]),s._v(" for...in 循环和数组的遍历")]),s._v(" "),t("p",[s._v("for...in循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var a = [1, 2, 3];\n  for (var i in a) {\n    console.log(a[i]);\n  }\n  // 1\n  // 2\n  // 3\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"实例方法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-3"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),t("ol",[t("li",[s._v("valueOf()，toString()：不同对象的valueOf方法不尽一致，数组的valueOf方法返回数组本身。数组的toString方法返回数组的字符串形式")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('  var arr = [1, 2, 3];\n  arr.valueOf() // [1, 2, 3]\n  /* */\n  var arr = [1, 2, 3];\n  arr.toString() // "1,2,3"\n\n  var arr = [1, 2, 3, [4, 5, 6]];\n  arr.toString() // "1,2,3,4,5,6"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("栈方法和队列方法：\npush()，pop() /  shift()，unshift()")]),s._v(" "),t("li",[s._v("连接方法： join()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。 "),t("strong",[s._v("concat()")]),s._v("： concat方法用于多个数组的合并")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var a = [1, 2, 3, 4];\n  a.join(' ') // '1 2 3 4'\n  a.join(' | ') // \"1 | 2 | 3 | 4\"\n  a.join() // \"1,2,3,4\"\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("数组元素倒序：  reverse()，该方法将改变原数组")]),s._v(" "),t("li",[s._v("截取数组一部分： slice()")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("arr.slice(start, end);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"6"}},[t("li",[s._v("数组的增删改查：splice()\narr.splice(start, count, addElement1, addElement2, ...);\nsplice的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。")]),s._v(" "),t("li",[s._v("排序：sort()： sort方法对数组成员进行排序，默认是按照字典顺序排序")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var arr = [2,5,1,4,68,0]\narr.sort((a,b) => a-b)//利用箭头函数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ol",{attrs:{start:"8"}},[t("li",[s._v("遍历： 缺点，不能通过break来停止\n"),t("ul",[t("li",[s._v("map() :有返回值")]),s._v(" "),t("li",[s._v("forEach() : 没有返回值")]),s._v(" "),t("li",[s._v("some() : 有一个 true，就返回true")]),s._v(" "),t("li",[s._v("every() ： 所有的都为true，才返回true")]),s._v(" "),t("li",[s._v("filter()： 过滤数组成员，返回满足条件的成员组成的新数组\n"),t("strong",[s._v("每个方法接收两个参数：要在每一项上运行的函数 和 this，绑定参数函数内部的this变量")]),s._v("\ncallack(): 包含三个参数，（item,index,arr）")])])]),s._v(" "),t("li",[s._v("归并方法： reduce()，reduceRight():reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  [1, 2, 3, 4, 5].reduce(function (a, b) {\n    console.log(a, b);\n    return a + b;\n  })\n  // 1 2\n  // 3 3\n  // 6 4\n  // 10 5\n  //最后结果：15\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"es6扩展-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6扩展-2"}},[s._v("#")]),s._v(" ES6扩展")]),s._v(" "),t("h4",{attrs:{id:"扩展运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[s._v("#")]),s._v(" 扩展运算符")]),s._v(" "),t("ol",[t("li",[s._v("扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("console.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[s._v("补充:")]),s._v(" 将字符串转为数组的三个方法：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Array.from();\nstr.split('');\n[...str]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Array.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("Array.of():用于将一组值，转换为数组")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Array.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("find() 和 findIndex(): 用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。两个方法接受第二个参数，用来绑定回调函数的this对象。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ol",{attrs:{start:"5"}},[t("li",[s._v("fill()： 使用给定值，填充一个数组")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  ['a', 'b', 'c'].fill(7, 1, 2)\n  // ['a', 7, 'c']\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ol",{attrs:{start:"6"}},[t("li",[s._v("数组实例的 entries()，keys() 和 values(): 如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  let letter = ['a', 'b', 'c'];\n  let entries = letter.entries();\n  console.log(entries.next().value); // [0, 'a']\n  console.log(entries.next().value); // [1, 'b']\n  console.log(entries.next().value); // [2, 'c']\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",{attrs:{start:"7"}},[t("li",[s._v("includes() :方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。")])]),s._v(" "),t("h3",{attrs:{id:"_1-5-object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-object"}},[s._v("#")]),s._v(" 1.5 Object")]),s._v(" "),t("p",[s._v('什么是对象？简单来说就是一组"键值对"（key-value）的集合，是一种无序的符合数据的集合。')]),s._v(" "),t("h4",{attrs:{id:"属性的查看"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性的查看"}},[s._v("#")]),s._v(" 属性的查看")]),s._v(" "),t("p",[t("strong",[s._v("Object.keys(obj)")]),s._v(":查看对象本身的所有属性")]),s._v(" "),t("p",[t("strong",[s._v("in运算符")]),s._v("：检查对象是否包含某个属性，它不能识别哪些属性是对象自身的，哪些属性是继承的")]),s._v(" "),t("h4",{attrs:{id:"属性的遍历：for-in-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性的遍历：for-in-循环"}},[s._v("#")]),s._v(" 属性的遍历：for...in 循环")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj = {a: 1, b: 2, c: 3};\n\n  for (var i in obj) {\n    console.log('键名：', i);\n    console.log('键值：', obj[i]);\n  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。\n它不仅遍历对象自身的属性，还遍历继承的属性。")]),s._v(" "),t("h4",{attrs:{id:"object对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object对象"}},[s._v("#")]),s._v(" Object对象")]),s._v(" "),t("p",[s._v("Object对象的原生方法分成两类：Object本身的方法与Object的实例方法")]),s._v(" "),t("p",[t("strong",[s._v("本身方法")]),s._v("：直接定义在对象上的方法")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  Object.print = function (o) { console.log(o) };\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("实例方法")]),s._v("：定义在Object原型对象Object.prototype上的方法。它可以被Object实例直接使用。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  Object.prototype.print = function () {\n    console.log(this);\n  };\n\n  var obj = new Object();\n  obj.print() // Object\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("全局方法：Object()：将任意值转为对象。这个方法常用于保证某个值一定是对象。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj = Object();\n  // 等同于\n  var obj = Object(undefined);\n  var obj = Object(null);\n\n  obj instanceof Object // true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"object-的静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-的静态方法"}},[s._v("#")]),s._v(" Object 的静态方法")]),s._v(" "),t("ul",[t("li",[s._v("Object.keys(obj)和Object.getOwnPropertyNames(obj): 接收一个对象作为参数，返回该对象所有自身属性组成的数组，其中Object.getOwnPropertyNames(obj)还返回不可枚举的属性名")]),s._v(" "),t("li",[s._v("对象属性相关的方法：\n"),t("ul",[t("li",[s._v("Object.getOwnPropertyDescriptor(obj,prop): 获取描述某个属性的对象(自身属性)")]),s._v(" "),t("li",[s._v("Object.getOwnPropertyDescriptors(obj): 获取描述对象所有属性的描述对象(自身属性)")]),s._v(" "),t("li",[s._v("Object.defineProperty(obj,prop,descriptor): 通过descriptor，定义某个属性的描述")]),s._v(" "),t("li",[s._v("Object.defineProperties(obj,descriptors)：通过描述对象，定义多个属性的描述对象。")])])]),s._v(" "),t("li",[s._v("控制对象状态相关的方法："),t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/object.html#%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1),s._v(" "),t("ul",[t("li",[s._v("Object.freeze(obj)：冻结一个对象。")]),s._v(" "),t("li",[s._v("Object.isFrozen(obj)：判断一个对象是否被冻结。")])])]),s._v(" "),t("li",[s._v("原型链相关方法：\n"),t("ul",[t("li",[s._v("Object.create(obj,props)：该方法可以指定原型对象和属性，返回一个新的对象。")]),s._v(" "),t("li",[s._v("Object.getPrototypeOf(obj)：获取对象的Prototype（原型）对象。")])])])]),s._v(" "),t("h4",{attrs:{id:"object-的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-的实例方法"}},[s._v("#")]),s._v(" Object 的实例方法")]),s._v(" "),t("ul",[t("li",[s._v("Object.prototype.valueOf()：返回当前对象对应的值。")]),s._v(" "),t("li",[s._v("Object.prototype.toString()：返回当前对象对应的字符串形式。")]),s._v(" "),t("li",[s._v("Object.prototype.toLocaleString()：返回当前对象对应的本地字符串形式。")]),s._v(" "),t("li",[s._v("Object.prototype.hasOwnProperty(prop)：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj = {\n    p: 123\n  };\n\n  obj.hasOwnProperty('p') // true\n  obj.hasOwnProperty('toString') // false\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])]),s._v(" "),t("li",[s._v("Object.prototype.isPrototypeOf()：判断当前对象是否为另一个对象的原型。"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj= {\n  \t\t\tname: 'tyt',\n  \t\t}\n  var obj2= { };\n  bj2.__proto__ = obj; \n  obj.isPrototypeOf(obj2); //true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])]),s._v(" "),t("li",[s._v("Object.prototype.propertyIsEnumerable(prop)：判断某个属性是否可枚举。")])]),s._v(" "),t("h4",{attrs:{id:"es6补充模块-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6补充模块-2"}},[s._v("#")]),s._v(" ES6补充模块")]),s._v(" "),t("p",[t("strong",[s._v("全局方法")])]),s._v(" "),t("p",[s._v("Object.assign():用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  const target = { a: 1 };\n\n  const source1 = { b: 2 };\n  const source2 = { c: 3 };\n\n  Object.assign(target, source1, source2);\n  target // {a:1, b:2, c:3}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("Object.assign()方法实行的是浅拷贝，就是说如果源对象某个属性的值是对象，那么目标对象拷贝到的是这个对象的引用，但他无法正确拷贝get属性和set属性。")])]),s._v(" "),t("p",[t("strong",[s._v("应用")]),s._v("：对数组的处理"),t("a",{attrs:{href:"https://wangdoc.com/es6/object-methods.html#objectis",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  Object.assign([1, 2, 3], [4, 5])\n  // [4, 5, 3]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Object.assign()把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。")]),s._v(" "),t("h5",{attrs:{id:"proto-属性，object-setprototypeof-，object-getprototypeof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proto-属性，object-setprototypeof-，object-getprototypeof"}},[s._v("#")]),s._v(" __proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("JavaScript 语言的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法.\n__proto__属性没有写入 ES6 的正文，而是写入了附录，原因是__proto__前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 ES6。标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("proto")]),s._v(": 用来读取或设置当前对象的原型对象（prototype）"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  // es5 的写法\n  const obj = {\n    method: function() { ... }\n  };\n  obj.__proto__ = someOtherObj;\n\n  // es6 的写法\n  var obj = Object.create(someOtherObj);\n  obj.method = function() { ... };\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])]),s._v(" "),t("li",[s._v("Object.setPrototypeOf(obj,prototype): 作用与__proto__相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  let proto = {};\n  let obj = { x: 10 };\n  Object.setPrototypeOf(obj, proto);\n\n  proto.y = 20;\n  proto.z = 40;\n\n  obj.x // 10\n  obj.y // 20\n  obj.z // 40\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])]),s._v(" "),t("li",[s._v("Object.keys(obj)，Object.values(obj)，Object.entries(obj):都返回一个数组，成员分别是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名、键值、键值对数组。")])]),s._v(" "),t("h4",{attrs:{id:"属性描述对象-attributes-object参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性描述对象-attributes-object参考"}},[s._v("#")]),s._v(" 属性描述对象—— attributes object"),t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/attributes.html#%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  {\n    value: 123,\n    writable: false,\n    enumerable: true,\n    configurable: false,\n    get: undefined,\n    set: undefined\n  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ol",[t("li",[s._v("value: 该属性的属性值，默认为undefined")]),s._v(" "),t("li",[s._v("writable: 该属性是否可写，默认为true")]),s._v(" "),t("li",[s._v("enumberable: 该属性是否可遍历，默认为true")]),s._v(" "),t("li",[s._v("configurable：表示可配置性，默认为true；configurable属性控制了属性描述对象的可写性")]),s._v(" "),t("li",[s._v("get: get是一个函数，表示该属性的取值函数（getter）,默认为undefined")]),s._v(" "),t("li",[s._v("set：set是一个函数，表示该属性的存值函数（setter），默认为undefined")])]),s._v(" "),t("h4",{attrs:{id:"存取器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存取器"}},[s._v("#")]),s._v(" 存取器")]),s._v(" "),t("p",[s._v("除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为setter，使用属性描述对象的set属性；取值函数称为getter，使用属性描述对象的get属性。\n一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如定制属性的读取和赋值行为。")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("注意，取值函数get不能接受参数，存值函数set只能接受一个参数（即属性的值）。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj = {\n    get p() {\n      return 'getter';\n    },\n    set p(value) {\n      console.log('setter: ' + value);\n    }\n  };\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"控制对象状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制对象状态"}},[s._v("#")]),s._v(" 控制对象状态")]),s._v(" "),t("p",[s._v("有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，最弱的一种是Object.preventExtensions()，其次是Object.seal()，最强的是Object.freeze()")]),s._v(" "),t("h3",{attrs:{id:"_1-6-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-function"}},[s._v("#")]),s._v(" 1.6 Function")]),s._v(" "),t("p",[t("strong",[s._v("函数名的提升")]),s._v("：下面例子中，表面上后面声明的函数f，应该覆盖前面的var赋值语句，但是由于存在函数提升，实际上正好反过来。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var f = function () {\n    console.log('1');\n  }\n\n  function f() {\n    console.log('2');\n  }\n\n  f() // 1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"函数的属性和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数的属性和方法"}},[s._v("#")]),s._v(" 函数的属性和方法")]),s._v(" "),t("ul",[t("li",[s._v("length: 返回定义时预传入的参数个数")]),s._v(" "),t("li",[s._v("toString()： 返回的是函数的源码")]),s._v(" "),t("li",[s._v("arguments和this：arguments是一个类数组对象，保存着传入的函数参数，该对象有一个callee属性，它是一个指针，指向拥有arguments对象的函数；他还是有一个caller属性，保存着调用当前函数的函数的引用。this引用的是函数执行时的环境对象，")]),s._v(" "),t("li",[s._v("每个函数都包含两个非继承而来的方法： call（scope,str） 和apply（scope,arr）。这两个方法用途都是在特定的作用域中调用函数，实际上就是设置函数体内部this的值。")])]),s._v(" "),t("h4",{attrs:{id:"函数作用域（scope）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域（scope）"}},[s._v("#")]),s._v(" 函数作用域（scope）")]),s._v(" "),t("p",[s._v("javascript中的作用域有： 全局作用域对应全局变量，变量在整个程序中一直存在，所有地方都可以读取；函数作用域对应局部变量，变量只在函数内部存在；ES6的块级作用域。")]),s._v(" "),t("h4",{attrs:{id:"函数本身的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数本身的作用域"}},[s._v("#")]),s._v(" 函数本身的作用域")]),s._v(" "),t("p",[t("strong",[s._v("函数本身也是一个值")]),s._v("，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var a = 1;\n  var x = function () {\n    console.log(a);\n  };\n\n  function f() {\n    var a = 2;\n    x();\n  }\n\nf() // 1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("同样的，函数体内部声明的函数，作用域绑定函数体内部。函数foo内部声明了一个函数bar，bar的作用域绑定foo。当我们在foo外部取出bar执行时，变量x指向的是foo内部的x，而不是foo外部的x。正是这种机制，构成了下文要讲解的“闭包”现象。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function foo() {\n    var x = 1;\n    function bar() {\n      console.log(x);\n    }\n    return bar;\n  }\n\n  var x = 2;\n  var f = foo();\n  f() // 1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h4",{attrs:{id:"闭包-保存和保护作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包-保存和保护作用"}},[s._v("#")]),s._v(" 闭包: 保存和保护作用")]),s._v(" "),t("p",[s._v("由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如f2记住了它诞生的环境f1，所以从f2可以得到f1的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function createIncrementor(start) {\n    return function () {\n      return start++;\n    };\n  }\n\n  var inc = createIncrementor(5);\n\n  inc() // 5\n  inc() // 6\n  inc() // 7\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("为什么会这样呢？原因就在于inc始终在内存中，而inc的存在依赖于createIncrementor()，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收")]),s._v(" "),t("p",[t("strong",[s._v("封装对象的私有属性和私有方法")])]),s._v(" "),t("h4",{attrs:{id:"es6补充模块-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6补充模块-3"}},[s._v("#")]),s._v(" ES6补充模块")]),s._v(" "),t("p",[s._v("参数默认值: 注意，在制定了参数默认值后，函数的length属性将失效\n"),t("strong",[s._v("箭头函数")]),s._v("\nES6 允许使用“箭头”（=>）定义函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var f = () => 5;\n  // 等同于\n  var f = function () { return 5 };\n\n  var sum = (num1, num2) => num1 + num2;\n  // 等同于\n  var sum = function(num1, num2) {\n    return num1 + num2;\n  };\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("注意事项:")]),s._v(" "),t("ul",[t("li",[s._v("箭头函数内部的this是定义时所在的对象（环境），而不是执行时所在的对象，这与普通函数是相反的")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function Timer() {\n    this.s1 = 0;\n    this.s2 = 0;\n    // 箭头函数\n    setInterval(() => this.s1++, 1000);\n    // 普通函数\n    setInterval(function () {\n      this.s2++;\n    }, 1000);\n  }\n\n  var timer = new Timer();\n\n  setTimeout(() => console.log('s1: ', timer.s1), 3100); // 3\n  setTimeout(() => console.log('s2: ', timer.s2), 3100); // 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("ul",[t("li",[s._v("不存在argumengs对象，他用rest参数替代")]),s._v(" "),t("li",[s._v("不可以使用yield命令，因此箭头函数不能用作 Generator 函数\n不适合应用箭头函数的场合：定义对象的方法，且该方法内部包括this；需要动态this的时候，也不应使用箭头函数")])]),s._v(" "),t("h4",{attrs:{id:"尾调用优化-：-节省内存-参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尾调用优化-：-节省内存-参考"}},[s._v("#")]),s._v(" 尾调用优化 ： 节省内存 "),t("a",{attrs:{href:"https://juejin.im/post/6844903590033621006",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("尾调用是函数式编程的重要概念，指某个函数的最后一步是调用另一个函数,即最后一步总是 "),t("strong",[s._v("return fun（）")]),s._v("；")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function f(x){\n    return g(x);\n  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"尾递归：-参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尾递归：-参考"}},[s._v("#")]),s._v(" 尾递归： "),t("a",{attrs:{href:"https://wangdoc.com/es6/function.html#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function factorial(n) {\n    if (n === 1) return 1;\n    return n * factorial(n - 1);\n  }\n\n  factorial(5) // 120\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。\n如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function factorial(n, total) {\n    if (n === 1) return total;\n    return factorial(n - 1, n * total);\n  }\n\n  factorial(5, 1) // 120\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("非尾递归的 Fibonacci 数列实现如下:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function Fibonacci (n) {\n    if ( n <= 1 ) {return 1};\n\n    return Fibonacci(n - 1) + Fibonacci(n - 2);\n  }\n\n  Fibonacci(10) // 89\n  Fibonacci(100) // 超时\n  Fibonacci(500) // 超时\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("尾递归优化过的 Fibonacci 数列实现如下:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n    if( n <= 1 ) {return ac2};\n\n    return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n  }\n\n  Fibonacci2(100) // 573147844013817200000\n  Fibonacci2(1000) // 7.0330367711422765e+208\n  Fibonacci2(10000) // Infinity\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"递归函数的改写：-一旦使用递归，就最好使用尾递归。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归函数的改写：-一旦使用递归，就最好使用尾递归。"}},[s._v("#")]),s._v(" 递归函数的改写： 一旦使用递归，就最好使用尾递归。")]),s._v(" "),t("p",[s._v("尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial 需要用到一个中间变量total，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观")]),s._v(" "),t("p",[s._v("两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function tailFactorial(n, total) {\n    if (n === 1) return total;\n    return tailFactorial(n - 1, n * total);\n  }\n\n  function factorial(n) {\n    return tailFactorial(n, 1);\n  }\n\n  factorial(5) // 120\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化.")]),s._v(" "),t("p",[s._v("第二种方法就简单多了，就是采用 ES6 的函数默认值")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function factorial(n, total = 1) {\n    if (n === 1) return total;\n    return factorial(n - 1, n * total);\n  }\n\n  factorial(5) // 120\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"_1-7-regexp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-regexp"}},[s._v("#")]),s._v(" 1.7 RegExp")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/regexp.html#%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1),s._v("\n正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本")]),s._v(" "),t("h3",{attrs:{id:"_1-8-math"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-math"}},[s._v("#")]),s._v(" 1.8 Math")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/math.html#%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考1"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://wangdoc.com/es6/number.html#math-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考2"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_1-9-date"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-date"}},[s._v("#")]),s._v(" 1.9 Date")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/date.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_2-0-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-json"}},[s._v("#")]),s._v(" 2.0 JSON")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/json.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"第二节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二节"}},[s._v("#")]),s._v(" 第二节")]),s._v(" "),t("h3",{attrs:{id:"_1-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3"}},[s._v("#")]),s._v(" 1.3")]),s._v(" "),t("h3",{attrs:{id:"_1-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2"}},[s._v("#")]),s._v(" 1.2")]),s._v(" "),t("h3",{attrs:{id:"_1-3-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2"}},[s._v("#")]),s._v(" 1.3")]),s._v(" "),t("h3",{attrs:{id:"_1-2-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2"}},[s._v("#")]),s._v(" 1.2")]),s._v(" "),t("h3",{attrs:{id:"_1-3-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3"}},[s._v("#")]),s._v(" 1.3")]),s._v(" "),t("h3",{attrs:{id:"_1-2-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3"}},[s._v("#")]),s._v(" 1.2")]),s._v(" "),t("h3",{attrs:{id:"_1-3-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-4"}},[s._v("#")]),s._v(" 1.3")])])}),[],!1,null,null,null);a.default=n.exports}}]);